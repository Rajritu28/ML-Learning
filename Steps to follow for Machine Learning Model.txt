
#Generic Steps to follow for Machine Learning Model
-----------------------------------------------------
#Step 0 : Frame the Objective:

- What is Business objective & expecting the benifit from the Model
- Which Algorithm needs to be selected. : Supervised,Unsupervised or Reinforcement/Classification or Regression/Batch or Online Learning
- Performance Measure : MSE,RMSE etc.
- Efforts required to tweaking it.

# Step 1: Read data from File.
------------------------------
Type 1 :
#Function for File Read
import os
import pandas as pd
def file_read(file_path,file_name):
	file_to_read = os.path.join(file_path,file_name)
	return pd.read_csv(file_to_read)

FILE_PATH = 'C:/Users/Admin/Documents/CloudxLab Machine Learning/ml-master/machine_learning/datasets/housing/'	
df = file_read (FILE_PATH,'housing.csv')

Type 2:
df = pd.read_csv('housing.csv')
=========================================================================


# Step 2: Explore the Data
--------------------------

df.head() : Check all the values & try to find the different types of values(like Categorical Values) or measurement of values(like 10000 scaled to 10)
df.describe()/df.info() : Check the Count/types/mean/std/max etc all of columns.
	
#Count Values of Categorical Data
val_count = df['Categorical'].value_counts()

# Plot Histogram of all Columns : Check for Capped values/Long tail
df.hist(bins=50,finsize=(20,15))
df['median_income'].hist()

-> If Values are Capped, then we need to think for estimate of those Capped Areas.
	-> Solution : Recollect the Data for those Capped Label or remove it from test Dataset.
	
-> If Long tails are there, transform attribute to more bell shaped Distributions.
	df['income_cat'] = np.ceil(df['median_income']/1.5)	
    df[['income_cat'].where(df['income_cat']<5,5.0,inplace=True)
	
=========================================================================


# Step 3: Split the Data into Train & Test Set
----------------------------------------------
	
-> Split the Train & Test Set now for avoiding Data Snooping or Overfitting & again visualise the Training Set Data Again.

Type 1: Use Standard Method to split
------------------------------------

from sklearn.model_selection  import train_test_split
train_set,test_set = train_test_split(df,test_size=0.2,random_seed=42)
print(len(train_set),"Train Set + "),len(test_set),"Test Set")

Type 2: User Defined Method for Splitting the Data
--------------------------------------------------
def split_train_test(data,test_size):
	np.random.seed(42)
	shuffled_indices = np.random.permutation(len(data));
	test_set_size = int(len(data)*test_size)
	test_set_indices = shuffled_indices[:test_set_size]
	train_set_indices = shuffled_indices[test_set_size:]
	return data.iloc[train_set_indices],data.iloc[test_set_indices]
	
Problem with this Split Function : When new added to the Dataset, splitting of data can cause Data Snooping.

Type 3 : Split Function Using Identifier
----------------------------------------
import hashlib

def test_set_check(identifer,test_ratio,hash):
	return hash(np.int64(identifer)).digest()[-1] < 256*test_ratio
	
def split_train_test_id(data,test_ratio,id_column,hash=hashlib.md5):
	ids = data[id_column]
	in_test_set = ids.apply(lambda id_: test_set_check(id_,test_ratio,hash))
	return data.loc[~in_test_set],data.loc[in_test_set]
	
# Combine Latitude & Longitude to form a unique IDs
df_id = df.reset_index()
df_id['id'] =  df['longitude']*1000+df['latitude']
train_set,test_set = split_train_test_id(df_id,0.2,'id')
print(len(train_set),"Train Set + "),len(test_set),"Test Set")

Type 3 : Split Function Using Stratified Sampling
-------------------------------------------------
# To Remove Sampling Biasness (From Different Strata on a column,take fixed % from each Strata)

from sklearn.model_selection import StratifiedShuffleSplit
split = StratifiedShuffleSplit(n_splits=1,test_size=0.2,random_seed=42)
for train_index,test_index in split.split(df,df['income_cat']):
	strat_train_set = df.loc[train_index]
	strat_test_set = df.loc[test_index]
	
# Compare income category proportion in Stratified Sampling and Random Sampling

def income_cat_proportions(data):
    return data["income_cat"].value_counts() / len(data)

train_set, test_set = train_test_split(df, test_size=0.2, random_state=42)

compare_props = pd.DataFrame({
    "Overall": income_cat_proportions(df),
    "Stratified": income_cat_proportions(strat_test_set),
    "Random": income_cat_proportions(test_set_id),
}).sort_index()
compare_props["Rand. %error"] = 100 * compare_props["Random"] / compare_props["Overall"] - 100
compare_props["Strat. %error"] = 100 * compare_props["Stratified"] / compare_props["Overall"] - 100

#Remove Transform Attributes
Type 1:
for set in (strat_train_set,strat_test_set):
	set.drop('income_cat',axis=1,inplace=True)
Type 2:
strat_train_set.drop('income_cat',axis=1,inplace=True)
strat_test_set.drop('income_cat',axis=1,inplace=True)

Type 4 : Visualise the Training Set
--------------------------------------

#Make a copy of Training Set
housing = strat_train_set.copy()

#Plot the Graph
housing.plot(kind='scatter',x='latitude',y='longitude',alpha=0.2)

housing.plot(kind="scatter", x="longitude", y="latitude", alpha=0.4,
    s=housing["population"]/100, label="population", figsize=(10,7),
    c="median_house_value", cmap=plt.get_cmap("jet"), colorbar=True,
    sharex=False)
plt.legend()

#Find the Correaltion of Target Column with all other Columns
cor = housing.corr()
cor['median_house_value'].sort_values(ascending=False)

#Plot the Graph of most corelated Columns
from pandas.plotting import scatter_matrix

attributes = ["median_house_value", "median_income", "total_rooms",
              "housing_median_age"]
scatter_matrix(housing[attributes], figsize=(12, 8))

#Experiment with other Attributes Combinations
housing['rooms_per_houshold'] = housing['total_rooms']/housing['households']
housing['bedrooms_per_room'] =  housing['bedrooms']/housing['total_rooms']
housing['population_per_household'] = housing['population']/housing['households']

new_cor = housing.cor()
new_cor['median_house_value'].sort_values(ascending=True)

#Split the Training Set into X & Y
housing = strat_train_set.drop('median_house_value',axis=1)
housing_labels = strat_train_set['median_house_value'].copy()

#Check for Missing Values
sample = housing[housing.isnull().any(axis=1)]
	-> Solution :
		1. Drops the Missing Values/Rows
			sample.dropna(subset=['total_bedrooms'],inplace=True)
			
		2. Drops the Attributes
			sample.drop('total_bedrooms',axis=1)
			
		3. Fill the Missing Values
			median = housing['total_bedrooms'].median()
			sample['total_bedrooms'].fillna(value=median,inplace=True)
			
#Use Scikit-Learn Imputer class to fill missing values

from sklearn.preprocessing import Imputer
imputer = Imputer(missing_values='NaN',strategy='median')

#Remove the TEXT Attributes because median cannot be calculated on it.
housing_num = housing.drop('ocean_proximity',axis=1)

imputer.fit(housing_num)
X = imputer.transform(housing_num) #All Column are passed for fill to avoid any missing values in coming future.

imputer.statistics_ # will give median value for each Columns

#Transform to DataFrame
 housing_tr = pd.DataFrame(X,columns=housing_num.columns)
 
#Transform Categorical Data into Numerical Values
-------------------------------------------------
housing_cat = housing['ocean_proximity']

Type 1: factorize()
-------------------
# Convert ocean_proximity to numbers
# Use Pandas factorize()

housing_cat_encoded, housing_categories = housing_cat.factorize()
housing_cat_encoded
housing_categories

#Type 2: Get_dummies
country = pd.get_dummies(df['Country'],drop_first=True)
df = pd.concat([country,df],axis=1)
df.drop(['Country'],axis=1,inplace=True)

#Type 3 : OneHotEncoder
from sklearn.preprocessing import OneHotEncoder
encoder = OneHotEncoder()
housing_cat_1hot = encoder.fit_transform(housing_cat_encoded.reshape(-1,1))

-> It will return Sparse Matrix. To Avoid it we can use below Function

#New Function for One hot Encoder
---------------------------------
# Just run this cell, or copy it to your code, do not try to understand it (yet).
# Definition of the CategoricalEncoder class, copied from PR #9151.

from sklearn.base import BaseEstimator, TransformerMixin
from sklearn.utils import check_array
from sklearn.preprocessing import LabelEncoder
from scipy import sparse

class CategoricalEncoder(BaseEstimator, TransformerMixin):
    """Encode categorical features as a numeric array.
    The input to this transformer should be a matrix of integers or strings,
    denoting the values taken on by categorical (discrete) features.
    The features can be encoded using a one-hot aka one-of-K scheme
    (``encoding='onehot'``, the default) or converted to ordinal integers
    (``encoding='ordinal'``).
    This encoding is needed for feeding categorical data to many scikit-learn
    estimators, notably linear models and SVMs with the standard kernels.
    Read more in the :ref:`User Guide <preprocessing_categorical_features>`.
    Parameters
    ----------
    encoding : str, 'onehot', 'onehot-dense' or 'ordinal'
        The type of encoding to use (default is 'onehot'):
        - 'onehot': encode the features using a one-hot aka one-of-K scheme
          (or also called 'dummy' encoding). This creates a binary column for
          each category and returns a sparse matrix.
        - 'onehot-dense': the same as 'onehot' but returns a dense array
          instead of a sparse matrix.
        - 'ordinal': encode the features as ordinal integers. This results in
          a single column of integers (0 to n_categories - 1) per feature.
    categories : 'auto' or a list of lists/arrays of values.
        Categories (unique values) per feature:
        - 'auto' : Determine categories automatically from the training data.
        - list : ``categories[i]`` holds the categories expected in the ith
          column. The passed categories are sorted before encoding the data
          (used categories can be found in the ``categories_`` attribute).
    dtype : number type, default np.float64
        Desired dtype of output.
    handle_unknown : 'error' (default) or 'ignore'
        Whether to raise an error or ignore if a unknown categorical feature is
        present during transform (default is to raise). When this is parameter
        is set to 'ignore' and an unknown category is encountered during
        transform, the resulting one-hot encoded columns for this feature
        will be all zeros.
        Ignoring unknown categories is not supported for
        ``encoding='ordinal'``.
    Attributes
    ----------
    categories_ : list of arrays
        The categories of each feature determined during fitting. When
        categories were specified manually, this holds the sorted categories
        (in order corresponding with output of `transform`).
    Examples
    --------
    Given a dataset with three features and two samples, we let the encoder
    find the maximum value per feature and transform the data to a binary
    one-hot encoding.
    >>> from sklearn.preprocessing import CategoricalEncoder
    >>> enc = CategoricalEncoder(handle_unknown='ignore')
    >>> enc.fit([[0, 0, 3], [1, 1, 0], [0, 2, 1], [1, 0, 2]])
    ... # doctest: +ELLIPSIS
    CategoricalEncoder(categories='auto', dtype=<... 'numpy.float64'>,
              encoding='onehot', handle_unknown='ignore')
    >>> enc.transform([[0, 1, 1], [1, 0, 4]]).toarray()
    array([[ 1.,  0.,  0.,  1.,  0.,  0.,  1.,  0.,  0.],
           [ 0.,  1.,  1.,  0.,  0.,  0.,  0.,  0.,  0.]])
    See also
    --------
    sklearn.preprocessing.OneHotEncoder : performs a one-hot encoding of
      integer ordinal features. The ``OneHotEncoder assumes`` that input
      features take on values in the range ``[0, max(feature)]`` instead of
      using the unique values.
    sklearn.feature_extraction.DictVectorizer : performs a one-hot encoding of
      dictionary items (also handles string-valued features).
    sklearn.feature_extraction.FeatureHasher : performs an approximate one-hot
      encoding of dictionary items or strings.
    """

    def __init__(self, encoding='onehot', categories='auto', dtype=np.float64,
                 handle_unknown='error'):
        self.encoding = encoding
        self.categories = categories
        self.dtype = dtype
        self.handle_unknown = handle_unknown

    def fit(self, X, y=None):
        """Fit the CategoricalEncoder to X.
        Parameters
        ----------
        X : array-like, shape [n_samples, n_feature]
            The data to determine the categories of each feature.
        Returns
        -------
        self
        """

        if self.encoding not in ['onehot', 'onehot-dense', 'ordinal']:
            template = ("encoding should be either 'onehot', 'onehot-dense' "
                        "or 'ordinal', got %s")
            raise ValueError(template % self.handle_unknown)

        if self.handle_unknown not in ['error', 'ignore']:
            template = ("handle_unknown should be either 'error' or "
                        "'ignore', got %s")
            raise ValueError(template % self.handle_unknown)

        if self.encoding == 'ordinal' and self.handle_unknown == 'ignore':
            raise ValueError("handle_unknown='ignore' is not supported for"
                             " encoding='ordinal'")

        X = check_array(X, dtype=np.object, accept_sparse='csc', copy=True)
        n_samples, n_features = X.shape

        self._label_encoders_ = [LabelEncoder() for _ in range(n_features)]

        for i in range(n_features):
            le = self._label_encoders_[i]
            Xi = X[:, i]
            if self.categories == 'auto':
                le.fit(Xi)
            else:
                valid_mask = np.in1d(Xi, self.categories[i])
                if not np.all(valid_mask):
                    if self.handle_unknown == 'error':
                        diff = np.unique(Xi[~valid_mask])
                        msg = ("Found unknown categories {0} in column {1}"
                               " during fit".format(diff, i))
                        raise ValueError(msg)
                le.classes_ = np.array(np.sort(self.categories[i]))

        self.categories_ = [le.classes_ for le in self._label_encoders_]

        return self

    def transform(self, X):
        """Transform X using one-hot encoding.
        Parameters
        ----------
        X : array-like, shape [n_samples, n_features]
            The data to encode.
        Returns
        -------
        X_out : sparse matrix or a 2-d array
            Transformed input.
        """
        X = check_array(X, accept_sparse='csc', dtype=np.object, copy=True)
        n_samples, n_features = X.shape
        X_int = np.zeros_like(X, dtype=np.int)
        X_mask = np.ones_like(X, dtype=np.bool)

        for i in range(n_features):
            valid_mask = np.in1d(X[:, i], self.categories_[i])

            if not np.all(valid_mask):
                if self.handle_unknown == 'error':
                    diff = np.unique(X[~valid_mask, i])
                    msg = ("Found unknown categories {0} in column {1}"
                           " during transform".format(diff, i))
                    raise ValueError(msg)
                else:
                    # Set the problematic rows to an acceptable value and
                    # continue `The rows are marked `X_mask` and will be
                    # removed later.
                    X_mask[:, i] = valid_mask
                    X[:, i][~valid_mask] = self.categories_[i][0]
            X_int[:, i] = self._label_encoders_[i].transform(X[:, i])

        if self.encoding == 'ordinal':
            return X_int.astype(self.dtype, copy=False)

        mask = X_mask.ravel()
        n_values = [cats.shape[0] for cats in self.categories_]
        n_values = np.array([0] + n_values)
        indices = np.cumsum(n_values)

        column_indices = (X_int + indices[:-1]).ravel()[mask]
        row_indices = np.repeat(np.arange(n_samples, dtype=np.int32),
                                n_features)[mask]
        data = np.ones(n_samples * n_features)[mask]

        out = sparse.csc_matrix((data, (row_indices, column_indices)),
                                shape=(n_samples, indices[-1]),
                                dtype=self.dtype).tocsr()
        if self.encoding == 'onehot-dense':
            return out.toarray()
        else:
            return out
			

# The CategoricalEncoder expects a 2D array containing one or more categorical input features. # The Cat 
# We need to reshape `housing_cat` to a 2D array:

cat_encoder = CategoricalEncoder(encoding="onehot-dense")
housing_cat_reshaped = housing_cat.values.reshape(-1, 1)
housing_cat_1hot = cat_encoder.fit_transform(housing_cat_reshaped)
housing_cat_1hot

#Class to add Experimentnal Columns
from sklearn.base import BaseEstimator, TransformerMixin

# column index
rooms_ix, bedrooms_ix, population_ix, household_ix = 3, 4, 5, 6

class CombinedAttributesAdder(BaseEstimator, TransformerMixin):
    def __init__(self, add_bedrooms_per_room = True): # no *args or **kargs
        self.add_bedrooms_per_room = add_bedrooms_per_room
    def fit(self, X, y=None):
        return self  # nothing else to do
    def transform(self, X, y=None):
        rooms_per_household = X[:, rooms_ix] / X[:, household_ix]
        population_per_household = X[:, population_ix] / X[:, household_ix]
        if self.add_bedrooms_per_room:
            bedrooms_per_room = X[:, bedrooms_ix] / X[:, rooms_ix]
            return np.c_[X, rooms_per_household, population_per_household,
                         bedrooms_per_room]
        else:
            return np.c_[X, rooms_per_household, population_per_household]

attr_adder = CombinedAttributesAdder(add_bedrooms_per_room=False)
housing_extra_attribs = attr_adder.transform(housing.values)
housing_extra_attribs = pd.DataFrame(housing_extra_attribs, columns=list(housing.columns)+["rooms_per_household", "population_per_household"])
housing_extra_attribs.head()

# Create a class to select numerical or categorical columns 
# since Scikit-Learn doesn't handle DataFrames yet

from sklearn.base import BaseEstimator, TransformerMixin
class DataFrameSelector(BaseEstimator, TransformerMixin):
    def __init__(self, attribute_names):
        self.attribute_names = attribute_names
    def fit(self, X, y=None):
        return self
    def transform(self, X):
        return X[self.attribute_names].values

		
# Now let's build a pipeline for preprocessing the numerical attributes:

from sklearn.pipeline import Pipeline
from sklearn.preprocessing import StandardScaler

num_attr = list(housing_num)
cat_attr = ["ocean_proximity"]

num_pipeline = Pipeline([
    ('selector',DataFrameSelector(num_attr)),
    ('imputer',Imputer(strategy='median')),
    ('attr_adder',CombinedAttributesAdder()),
    ('scaler',StandardScaler()),
])

cat_pipeline = Pipeline([
    ('selector',DataFrameSelector(cat_attr)),
    ('cat_encoder',CategoricalEncoder(encoding="onehot-dense"))
])

#Pipeline Feature Union
from sklearn.pipeline import FeatureUnion
full_pipeline = FeatureUnion(
    transformer_list=[
        ("num_pipeline", num_pipeline),
        ("cat_pipeline", cat_pipeline),
])

#Final Prepared Training Set
housing_prepared = full_pipeline.fit_transform(housing)


# Train a Linear Regression model 
from sklearn.linear_model import LinearRegression
lin_reg = LinearRegression()
lin_reg.fit(housing_prepared, housing_labels)
housing_pred = lin_reg.predict(housing_prepared) #Prediction Done on Training Set Data

# Evaluate the Model Prediction
from sklearn.metrics import mean_squared_error
lin_mse = mean_squared_error(housing_labels,housing_pred)
lin_rmse = np.sqrt(lin_mse)

# Train data with Another Model
from sklearn.tree import DecisionTreeRegression
dec_reg = DecisionTreeRegression(random_state=42)
dec_reg.fit(housing_prepared,housing_labels)
dec_reg.predict(housing_prepared)


housing_predictions  = dec_reg.predict(housing_prepared)
tree_mse = mean_squared_error(housing_labels,housing_pred)
tree_rmse = np.sqrt(tree_mse)

# Evaluate the Model Prediction using another Feature to gain confidence on Model
# Performs K-fold cross-validation# Perform 
# Randomly splits the training set into 10 distinct subsets called folds
# Then it trains and evaluates the Decision Tree model 10 times By
# Picking a different fold for evaluation every time and training on the other 9 folds
# The result is an array containing the 10 evaluation scores

from sklearn.model_selection import cross_val_score
tree_reg = DecisionTreeRegression(random_state=42)
scores = cross_val_score(tree_reg,housing_prepared,housing_labels,scoring='neg_mean_squared_error',cv=10)
tree_rmse_scorees = np.sqrt(-scores)

#Function for dislapy the Score of Cross_validation 
	def display_score(score):
		print('Score :',Score)
		print('Mean :',score.mean())
		print('Standard Deviation :',score.std())
		
#Check the Score of Decision Tree
display_score(tree_rmse_scorees)

#Perform K-fold Cross_validation on LinearRegression Model
lin_reg = LinearRegression()
scores = cross_val_score(lin_reg,housing_prepared,housing_labels,scoring='neg_mean_squared_error',cv=10)
lin_rmse_scores = np.sqrt(-scores)

display_score(lin_rmse_scores)

#Train the Model on RandomForest Algorithm
from sklearn.ensamble import RandomForestRegressor
ran_reg = RandomForestRegressor(random_state=42)
ran_reg.fit(housing_prepared,housing_labels)

housing_predictions = ran_reg.predict(housing_prepared)

ran_mse = mean_squared_error(housing_labels,housing_predictions)
ran_rmse = np.sqrt(ran_mse)


# Cross Validation in Random Forest model# Cross V 
#conda install py-xgboost (Run in Command Prompt)

from xgboost import XGBRegressor
xgb = XGBRegressor()

scores = cross_val_score(xgb,housing_prepared,housing_labels,scoring='neg_mean_squared_error',cv=10)
ran_rmse_scores = np.sqrt(-scores)

display_score(ran_rmse_scores)


# RandomForest Model proves better than the two.Now, we will try to Fine Tune the Selected Model

#Hyperparameter : Ex ; random_state,no of cluster,no. of hidden neural network

Type 1 : Grid Search
#GridSearchCV
from sklearn.model_selection import GridSearchCV
param_grid = [
    # try 12 (3×4) combinations of hyperparameters
    {'n_estimators': [3, 10, 30], 'max_features': [2, 4, 6, 8]},
    # then try 6 (2×3) combinations with bootstrap set as False
    {'bootstrap': [False], 'n_estimators': [3, 10], 'max_features': [2, 3, 4]},
]
forest_reg = RandomForestRegressor(random_state=42)
grid_search = GridSearchCV(forest_reg,param_grid,cv=5,scoring='neg_mean_squared_error',n_jobs=4)
grid_search.fit(housing_prepared, housing_labels)
grid_search.best_params_    #it will give the best Hyperparameter combinations.
grid_search.best_estimator_ # Get the best estimator


# Let's look at the score of each hyperparameter combination tested during the grid search

cvres = grid_search.cv_results_
for mean_score, params in zip(cvres["mean_test_score"], cvres["params"]):
   print(np.sqrt(-mean_score), params)
   
# See the importance score of each attribute in GridSearchCV
# It will show contribution of each attribute towards prediction.
feature_importances = grid_search.best_estimator_.feature_importances_
extra_attribs = ["rooms_per_hhold", "pop_per_hhold", "bedrooms_per_room"]
cat_encoder = cat_pipeline.named_steps["cat_encoder"]
cat_one_hot_attribs = list(cat_encoder.categories_[0])
attributes = num_attr + extra_attribs + cat_one_hot_attribs
sorted(zip(feature_importances, attributes), reverse=True)
   
-> GridSearchCV is very tedious & almost impossible on large dataset.

Type 2: Fine-Tune Model - Randomized Search
-------------------------------------------
#Instead of trying out all possible combinations,Evaluates a given number of random combinations
from sklearn.model_selection import RandomizedSearchCV
from scipy.stats import randint

param_distribs = {
        'n_estimators': randint(low=1, high=200),
        'max_features': randint(low=1, high=8),
    }

forest_reg = RandomForestRegressor(random_state=42)
rnd_search = RandomizedSearchCV(forest_reg, param_distributions=param_distribs,
                                n_iter=1, cv=8, scoring='neg_mean_squared_error', random_state=42)
rnd_search.fit(housing_prepared, housing_labels) 

Type 3: Ensemble Methods : Combine best performing models


#Finally Make Prediction on Test Set

final_model = grid_search.best_estimator_
X_test = strat_test_set.drop('median_house_value',axis=1)
y_test = strat_test_set['median_house_value'].copy()

X_test_prepared = full_pipeline.transform(X_test)
final_prediction = final_model.predict(X_test_prepared)

final_mse = mean_squared_error(y_test,final_prediction)
final_rmse = np.sqrt(final_mse)